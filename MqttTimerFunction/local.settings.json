{
  "IsEncrypted": false,
  "Values": {
    "AzureWebJobsStorage": "UseDevelopmentStorage=true",
    "FUNCTIONS_WORKER_RUNTIME": "dotnet-isolated",

    // Note: These configurations won't get deployed to Azure, it's local only
    //       Enter all the values in Configration section

    "MqttBrokerURL": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    "MqttBrokerClientID": "ClientUniqueName00001",
    "MqttBrokerTopic": "topicname/actionname",
    "MqttBrokerUsername": "username",
    "MqttBrokerPassword": "password",
    "Timer1GpioName": "GP16",
    "Timer1CronON": "0 30 8 * * *", // sample starts at 8:30 AM   (0 30 8 * * *)
    "Timer1CronOFF": "0 30 20 * * *", // sample stops at 20:30 PM (0 30 20 * * *)
    "Timer2GpioName": "GP17",
    "Timer2CronON": "0 0 17 * * *", // sample starts: 17:00 PM (0 0 17 * * *)
    "Timer2CronOFF": "0 30 23 * * *", // sample stops: 23:30 PM (0 30 23 * * *)
    "Http1Json": "{'MFA':123456, 'GP26':1, 'GP27':1}", // sample http trigger 1  turn on 2 relays 
    "Http2Json": "{'MFA':123456, 'GP16':0}", // sample http trigger 2 turn off a relay 
    "TotpKey": "ORUGS4ZANFZSAYJAONSWG4TFOQQGWZLZ" // This key is Base32 encoded, use online tool to encode/decode.

    // NOTES: Http Trigger Azure Function, Http1Json and Http2Json are authenicated by Function key, 
    //        use query string code=[key] or x-functions-key:[key] in HTTP Header on the URL


    // Azure Portal deployment notes:
    // 1. Create Function App (Consumption plan)
    // 2. Create Storage Account (only Blog and File are needed, Table and Query are not needed)
    // 3. In Function App > "Configuration" or "Environment variables" section
    // 4. Create the custom values above
    // 5. Create a variable to set the time zone, otherwise CRON is in UTC
    //    WEBSITE_TIME_ZONE : Eastern Standard Time
    // 6. Get the ConnectionString from Storage Account > Access Keys, create variables:
    //    AzureWebJobsStorage: DefaultEndpointsProtocol=https;AccountName=xxxxxx
    //    WEBSITE_CONTENTAZUREFILECONNECTIONSTRING: DefaultEndpointsProtocol=https;AccountName=xxxxxx
    //    WEBSITE_CONTENTSHARE: storage123456  (make up a name)
    //    Note: AzureWebJobsStorage and WEBSITE_CONTENTAZUREFILECONNECTIONSTRING have the same value.
    // 7. Function App > Get Publishing Profile (download it)
    // 8. Deploy from Visual Studio using the profile
    // 9. Start Function App
    // 10. storage123456 will get created in Storage account > File shares
    //     azure-webjobs-hosts will get created in Storage account > Containers
    // 11. Security: Function App > Networking, disable public access, and add your HOME IP only.
    //               Storage account > Networking, leave public access opened (unfortunately). 
    //               Ideally, for Enterprise we should connect to Function App to Storage Account by virtual network.
    //               However, Consumption plan, it doesn't support, even adding all Function App outbound IPs to Storage account doesn't always work. 
    // Notes:
    // HTTP Trigger doesn't need Storage Account
    // Timer Trigger needs "AzureWebJobsStorage" parameter and you will get a warning. But everything still works okay.
    // Proper way is to setup using all 3 settings: AzureWebJobsStorage, WEBSITE_CONTENTSHARE and WEBSITE_CONTENTAZUREFILECONNECTIONSTRING
    //
    // If you get error: 1 functions found (Custom)
    //                   0 functions loaded
    // It's not working. Delete the storage account and do it again step by step. Reset the Publishing Profile and Deploy from VS again. 



  }
}